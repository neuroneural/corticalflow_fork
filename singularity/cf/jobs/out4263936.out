[2024-01-08 23:23:26,475][__main__][INFO] - Training Cortical Flow
Config:
user_config: null
dataset:
  path: /subj/
  split_file: /corticalflow/subjs.csv
  train_split_name: train
  val_split_name: val
  surface_name: rh_white
trainer:
  img_batch_size: 3
  points_per_image: 150000
  train_log_interval: 10
  checkpoint_interval: 10000
  evaluate_interval: 5000
  device: cuda:0
  resume: null
  debug: false
model:
  number_of_iterations:
  - 70000
  - 70000
  - 70000
  nb_features:
  - - - 16
      - 32
      - 32
      - 32
    - - 32
      - 32
      - 32
      - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  templates:
  - /corticalflow/resources/neurips_templates/rh_white_template_30k.obj
  - /corticalflow/resources/neurips_templates/rh_white_template_135k.obj
  - /corticalflow/resources/neurips_templates/rh_white_template_435k.obj
  integration_method: NeurIPS
  integration_steps: 30
  share_flows: true
objective:
  chamffer_weight:
  - 1.0
  - 1.0
  - 1.0
  edge_loss_weight:
  - 1.0
  - 1.0
  - 1.0
optimizer:
  name: Adam
  lr:
  - 0.0001
  - 0.0001
  - 0.0001
outputs:
  output_dir: /corticalflow/output2/cf/out_rh_white

[2024-01-08 23:23:26,502][__main__][INFO] - 732 subjects loaded for training
[2024-01-08 23:23:26,505][__main__][INFO] - 58 subjects loaded for validation
[2024-01-08 23:23:35,543][__main__][INFO] - Model setup:
CorticalFlow(
  (deform_blocks): ModuleList(
    (0): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(1, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (3): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (3): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(33, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(32, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
    (1): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(4, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(36, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
    (2): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(7, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(39, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
  )
)
[2024-01-08 23:23:35,550][__main__][INFO] - Tensorboard logs saved to /corticalflow/output2/cf/out_rh_white/tb_logs
[2024-01-08 23:23:35,551][__main__][INFO] - Training deformation 0
[2024-01-08 23:23:35,778][__main__][INFO] - Train deform 0: Template mesh <trimesh.Trimesh(vertices.shape=(30317, 3), faces.shape=(60630, 3))> read from /corticalflow/resources/neurips_templates/rh_white_template_30k.obj
[2024-01-08 23:23:35,837][__main__][INFO] - Train deform 0: Shift=tensor([[[ 26.0446, -18.3473,  13.4998]]], device='cuda:0') and Scale=96.18108048484956 for template mesh.
[2024-01-08 23:23:35,838][__main__][INFO] - Train deform 0: number of learnable parameters: 300115/519865
[2024-01-08 23:23:35,839][__main__][INFO] - Train deform 0: Optimizer setup:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0
)
[2024-01-08 23:23:35,839][__main__][INFO] - Starting train deformation 0 from 1 iterations with best validation loss of 3.4028234663852886e+38
[2024-01-08 23:23:56,317][__main__][INFO] - Training: deform=0, Ite=10, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.0419837836176157, 'edge_loss': 0.00024367982405237854, 'loss': 0.04222746230661869}), AvgIteTime=2.05 secs
[2024-01-08 23:24:10,271][__main__][INFO] - Training: deform=0, Ite=20, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04173307158052921, 'edge_loss': 0.00024367982405237854, 'loss': 0.0419767502695322}), AvgIteTime=1.40 secs
[2024-01-08 23:24:24,051][__main__][INFO] - Training: deform=0, Ite=30, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04169539324939251, 'edge_loss': 0.00024367982405237854, 'loss': 0.0419390719383955}), AvgIteTime=1.38 secs
[2024-01-08 23:24:38,179][__main__][INFO] - Training: deform=0, Ite=40, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04230955727398396, 'edge_loss': 0.00024367982405237854, 'loss': 0.04255323596298695}), AvgIteTime=1.41 secs
[2024-01-08 23:24:51,915][__main__][INFO] - Training: deform=0, Ite=50, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04172433614730835, 'edge_loss': 0.00024367982405237854, 'loss': 0.04196801483631134}), AvgIteTime=1.37 secs
[2024-01-08 23:25:05,964][__main__][INFO] - Training: deform=0, Ite=60, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.042202099412679675, 'edge_loss': 0.00024367982405237854, 'loss': 0.042445778101682666}), AvgIteTime=1.40 secs
[2024-01-08 23:25:19,636][__main__][INFO] - Training: deform=0, Ite=70, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04137633554637432, 'edge_loss': 0.00024367982405237854, 'loss': 0.04162001423537731}), AvgIteTime=1.37 secs
[2024-01-08 23:25:33,509][__main__][INFO] - Training: deform=0, Ite=80, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04229829423129559, 'edge_loss': 0.00024367982405237854, 'loss': 0.04254197292029858}), AvgIteTime=1.39 secs
[2024-01-08 23:25:47,347][__main__][INFO] - Training: deform=0, Ite=90, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04125309251248836, 'edge_loss': 0.00024367982405237854, 'loss': 0.04149677120149135}), AvgIteTime=1.38 secs
[2024-01-08 23:26:01,381][__main__][INFO] - Training: deform=0, Ite=100, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04115263186395168, 'edge_loss': 0.00024367982405237854, 'loss': 0.041396310552954674}), AvgIteTime=1.40 secs
[2024-01-08 23:26:14,940][__main__][INFO] - Training: deform=0, Ite=110, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.041487589851021765, 'edge_loss': 0.00024367982405237854, 'loss': 0.041731268540024756}), AvgIteTime=1.36 secs
[2024-01-08 23:26:29,698][__main__][INFO] - Training: deform=0, Ite=120, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04146028310060501, 'edge_loss': 0.00024367982405237854, 'loss': 0.041703961789608}), AvgIteTime=1.48 secs
[2024-01-08 23:26:43,403][__main__][INFO] - Training: deform=0, Ite=130, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.0418557308614254, 'edge_loss': 0.00024367982405237854, 'loss': 0.04209940955042839}), AvgIteTime=1.37 secs
[2024-01-08 23:26:57,557][__main__][INFO] - Training: deform=0, Ite=140, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04168099947273731, 'edge_loss': 0.00024367982405237854, 'loss': 0.0419246781617403}), AvgIteTime=1.42 secs
[2024-01-08 23:27:11,590][__main__][INFO] - Training: deform=0, Ite=150, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04114937745034695, 'edge_loss': 0.00024367982405237854, 'loss': 0.04139305613934994}), AvgIteTime=1.40 secs
[2024-01-08 23:27:25,580][__main__][INFO] - Training: deform=0, Ite=160, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.041329655796289444, 'edge_loss': 0.00024367982405237854, 'loss': 0.041573334485292435}), AvgIteTime=1.40 secs
[2024-01-08 23:27:39,566][__main__][INFO] - Training: deform=0, Ite=170, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04208446852862835, 'edge_loss': 0.00024367982405237854, 'loss': 0.04232814721763134}), AvgIteTime=1.40 secs
[2024-01-08 23:27:53,469][__main__][INFO] - Training: deform=0, Ite=180, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.041451017186045644, 'edge_loss': 0.00024367982405237854, 'loss': 0.041694695875048635}), AvgIteTime=1.39 secs
[2024-01-08 23:28:07,571][__main__][INFO] - Training: deform=0, Ite=190, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04151503257453441, 'edge_loss': 0.00024367982405237854, 'loss': 0.041758711263537404}), AvgIteTime=1.41 secs
