[2024-01-08 23:31:45,313][__main__][INFO] - Training Cortical Flow
Config:
user_config: null
dataset:
  path: /subj/
  split_file: /corticalflow/subjs.csv
  train_split_name: train
  val_split_name: val
  surface_name: rh_white
trainer:
  img_batch_size: 3
  points_per_image: 150000
  train_log_interval: 10
  checkpoint_interval: 10000
  evaluate_interval: 5000
  device: cuda:0
  resume: /data/users2/washbee/speedrun/corticalflow_fork/output2/corticalflow_euler_neurips/out_rh_white/checkpoints/model_DT1_ite070000.pth
  debug: false
model:
  number_of_iterations:
  - 70000
  - 70000
  - 70000
  nb_features:
  - - - 16
      - 32
      - 32
      - 32
    - - 32
      - 32
      - 32
      - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  templates:
  - /corticalflow/resources/neurips_templates/rh_white_template_30k.obj
  - /corticalflow/resources/neurips_templates/rh_white_template_135k.obj
  - /corticalflow/resources/neurips_templates/rh_white_template_435k.obj
  integration_method: NeurIPS
  integration_steps: 30
  share_flows: true
objective:
  chamffer_weight:
  - 1.0
  - 1.0
  - 1.0
  edge_loss_weight:
  - 1.0
  - 1.0
  - 1.0
optimizer:
  name: Adam
  lr:
  - 0.0001
  - 0.0001
  - 0.0001
outputs:
  output_dir: /corticalflow/output2/cf/out_rh_white

[2024-01-08 23:31:45,338][__main__][INFO] - 732 subjects loaded for training
[2024-01-08 23:31:45,342][__main__][INFO] - 58 subjects loaded for validation
[2024-01-08 23:31:53,412][__main__][INFO] - Model setup:
CorticalFlow(
  (deform_blocks): ModuleList(
    (0): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(1, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (3): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (3): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(33, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(32, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
    (1): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(4, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(36, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
    (2): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(7, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(39, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
  )
)
[2024-01-08 23:31:53,419][__main__][INFO] - Tensorboard logs saved to /corticalflow/output2/cf/out_rh_white/tb_logs
[2024-01-08 23:31:53,419][__main__][INFO] - Resuming training from output directory /data/users2/washbee/speedrun/corticalflow_fork/output2/corticalflow_euler_neurips/out_rh_white/checkpoints/model_DT1_ite070000.pth
[2024-01-08 23:31:53,445][__main__][INFO] - Training deformation 1
[2024-01-08 23:31:54,399][__main__][INFO] - Train deform 1: Template mesh <trimesh.Trimesh(vertices.shape=(135742, 3), faces.shape=(271480, 3))> read from /corticalflow/resources/neurips_templates/rh_white_template_135k.obj
[2024-01-08 23:31:54,446][__main__][INFO] - Train deform 1: Shift=tensor([[[ 26.1947, -18.2169,  13.4532]]], device='cuda:0') and Scale=96.33103739588178 for template mesh.
[2024-01-08 23:31:54,460][__main__][INFO] - loading model from /data/users2/washbee/speedrun/corticalflow_fork/output2/corticalflow_euler_neurips/out_rh_white/checkpoints/model_DT1_ite070000.pth due to resume training
[2024-01-08 23:31:54,460][__main__][INFO] - Train deform 1: number of learnable parameters: 108579/519865
[2024-01-08 23:31:54,461][__main__][INFO] - Train deform 1: Optimizer setup:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0
)
[2024-01-08 23:31:54,474][__main__][INFO] - loading optimizer from /data/users2/washbee/speedrun/corticalflow_fork/output2/corticalflow_euler_neurips/out_rh_white/checkpoints/model_DT1_ite070000.pth due to resume training
[2024-01-08 23:31:54,474][__main__][INFO] - Starting train deformation 1 from 70000 iterations with best validation loss of 0.014338482428213646
[2024-01-08 23:32:00,972][__main__][INFO] - Training: deform=1, Ite=70000, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04360269382596016, 'edge_loss': 5.4859876399859786e-05, 'loss': 0.04365755245089531}), AvgIteTime=6.50 secs
[2024-01-08 23:32:00,974][__main__][INFO] - Evaluating...
[2024-01-08 23:32:44,882][__main__][INFO] - Evaluation: deform=1, Ite=70000, Loss=defaultdict(<class 'float'>, {'chamffer_points': 0.014339514590542892, 'edge_loss': 1.8917198695848568e-05, 'loss': 0.01435843135776191}), EvalTime=43.91 secs
[2024-01-08 23:32:47,975][__main__][INFO] - visualization of predictions saved into /corticalflow/output2/cf/out_rh_white/visualize/DT_1/vis_ite070000
[2024-01-08 23:32:47,999][__main__][INFO] - checkpoint saved to /corticalflow/output2/cf/out_rh_white/checkpoints/model_DT1_ite070000.pth
[2024-01-08 23:32:47,999][__main__][INFO] - Training deformation 2
