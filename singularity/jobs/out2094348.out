[2023-01-10 23:53:10,997][__main__][INFO] - Predicting surfaces with Cortical Flow
Config:
user_config: null
inputs:
  data_type: formatted
  path: /subj/
  split_name: test
  split_file: /corticalflow/subjs.csv
  hemisphere: lh
  device: cuda:0
  template: /corticalflow/resources/neurips_templates/lh_white_template_435k.obj
white_model:
  nb_features:
  - - - 16
      - 32
      - 32
      - 32
    - - 32
      - 32
      - 32
      - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  integration_method: RK4
  integration_steps: 30
  share_flows: true
  model_checkpoint: /data/users2/washbee/speedrun/corticalflow_fork/output_dir_lh_white/best_model_DT2.pth
pial_model: null
outputs:
  output_dir: /corticalflow/output_lh_white/
  out_deform:
  - 0
  - 1
  - 2
  out_format: freesurfer

[2023-01-10 23:53:10,997][__main__][INFO] - loading from formatted dataset...
[2023-01-10 23:53:11,022][__main__][INFO] - 107 subjects loaded for test in 0.0250 secs
[2023-01-10 23:53:14,455][__main__][INFO] - Template mesh <trimesh.Trimesh(vertices.shape=(435341, 3), faces.shape=(870678, 3))> read from /corticalflow/resources/neurips_templates/lh_white_template_435k.obj
[2023-01-10 23:53:22,981][__main__][INFO] - 8.5247 secs for white model setup:
CorticalFlow(
  (deform_blocks): ModuleList(
    (0): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(1, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (3): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (3): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(33, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(32, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
    (1): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(4, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(36, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
    (2): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(7, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(39, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
  )
)
[2023-01-10 23:53:22,982][__main__][INFO] - White model Total number of parameters: 519865
[2023-01-10 23:53:23,013][__main__][INFO] - White Model weights at deformation train 2 iteration 60000 and validation metric 0.0000 loaded from /data/users2/washbee/speedrun/corticalflow_fork/output_dir_lh_white/best_model_DT2.pth in 0.0306 secs
[2023-01-10 23:53:23,013][__main__][INFO] - Pial model is not specified.
[2023-01-10 23:53:23,013][__main__][INFO] - predicting...
[2023-01-10 23:53:29,730][__main__][INFO] - 6/107 subjects processed.
[2023-01-10 23:54:04,820][__main__][INFO] - 66/107 subjects processed.
[2023-01-10 23:54:29,120][__main__][INFO] - DONE !!!
