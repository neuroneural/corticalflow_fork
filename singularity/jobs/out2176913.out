inside predict_app
[2023-02-20 19:07:17,002][__main__][INFO] - Predicting surfaces with Cortical Flow
Config:
user_config: null
inputs:
  data_type: formatted
  path: /subj/
  split_name: test
  split_file: /corticalflow/subjs.csv
  hemisphere: lh
  device: cuda:0
  template: /corticalflow/resources/smooth_templates/lh_white_smooth_380k.obj
white_model:
  nb_features:
  - - - 16
      - 32
      - 32
      - 32
    - - 32
      - 32
      - 32
      - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  integration_method: RK4
  integration_steps: 30
  share_flows: true
  model_checkpoint: /corticalflow/resources/trained_models/CFPP_LEFT_WHITE.pth
pial_model:
  nb_features:
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  integration_method: RK4
  integration_steps: 30
  share_flows: true
  model_checkpoint: /corticalflow/resources/trained_models/CFPP_LEFT_PIAL.pth
outputs:
  output_dir: /data/users2/washbee/corticalflow/cfpp/output_lh/
  out_deform:
  - 0
  - 1
  - 2
  out_format: freesurfer

a
b
[2023-02-20 19:07:17,003][__main__][INFO] - loading from formatted dataset...
[2023-02-20 19:07:17,010][__main__][INFO] - 107 subjects loaded for test in 0.0078 secs
[2023-02-20 19:07:19,635][__main__][INFO] - Template mesh <trimesh.Trimesh(vertices.shape=(379970, 3), faces.shape=(759936, 3))> read from /corticalflow/resources/smooth_templates/lh_white_smooth_380k.obj
[2023-02-20 19:07:22,265][__main__][INFO] - 2.6288 secs for white model setup:
CorticalFlow(
  (deform_blocks): ModuleList(
    (0): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(1, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (3): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (3): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(33, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(32, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
    (1): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(4, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(36, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
    (2): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(7, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(39, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
  )
)
[2023-02-20 19:07:22,266][__main__][INFO] - White model Total number of parameters: 519865
[2023-02-20 19:07:22,287][__main__][INFO] - White Model weights at deformation train 2 iteration 65000 and validation metric 0.0000 loaded from /corticalflow/resources/trained_models/CFPP_LEFT_WHITE.pth in 0.0207 secs
[2023-02-20 19:07:22,302][__main__][INFO] - 0.0137 secs for white model setup:
CorticalFlow(
  (deform_blocks): ModuleList(
    (0): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(1, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(33, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
    (1): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(4, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(36, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
    (2): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(7, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(39, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
  )
)
[2023-02-20 19:07:22,302][__main__][INFO] - Pial model Total number of parameters: 325737
[2023-02-20 19:07:22,318][__main__][INFO] - Pial Model weights at deformation train 2 iteration 50000 and validation metric 0.0000 loaded from /corticalflow/resources/trained_models/CFPP_LEFT_PIAL.pth in 0.0155 secs
[2023-02-20 19:07:22,318][__main__][INFO] - predicting...
ite 0
data {'subject': [200008, 200109, 200210, 200311, 200614, 200917], 'mri_vox': tensor([[[[-1.1986, -1.1837, -1.1837,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1986, -1.1986, -1.1986,  ..., -1.2136, -1.2285, -1.2136],
          [-1.1837, -1.1986, -1.1837,  ..., -1.2136, -1.2285, -1.2136],
          ...,
          [-0.5855, -0.5855, -0.6154,  ..., -1.1986, -1.1837, -1.1837],
          [-0.6304, -0.6453, -0.6453,  ..., -1.1837, -1.1986, -1.1986],
          [-0.6753, -0.6902, -0.7052,  ..., -1.1837, -1.1986, -1.1986]],

         [[-1.1837, -1.1538, -1.1538,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1986, -1.1687, -1.1837,  ..., -1.2136, -1.2285, -1.2136],
          [-1.1837, -1.1986, -1.1687,  ..., -1.2136, -1.2285, -1.2285],
          ...,
          [-0.4958, -0.4958, -0.5108,  ..., -1.1837, -1.1986, -1.1837],
          [-0.5407, -0.5407, -0.5407,  ..., -1.1986, -1.1986, -1.1837],
          [-0.6005, -0.5855, -0.5855,  ..., -1.1837, -1.1986, -1.1986]],

         [[-1.1986, -1.1837, -1.1837,  ..., -1.2136, -1.2285, -1.2136],
          [-1.1986, -1.1837, -1.1837,  ..., -1.2136, -1.2285, -1.2136],
          [-1.1986, -1.1687, -1.1687,  ..., -1.2136, -1.2136, -1.2136],
          ...,
          [-0.4061, -0.3911, -0.4061,  ..., -1.1986, -1.1687, -1.1837],
          [-0.4510, -0.4360, -0.4659,  ..., -1.1837, -1.1687, -1.1837],
          [-0.4958, -0.4809, -0.5108,  ..., -1.1986, -1.1687, -1.1837]],

         ...,

         [[-1.1837, -1.1986, -1.1986,  ..., -1.2285, -1.2285, -1.2136],
          [-1.1837, -1.1837, -1.1986,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1986, -1.1986, -1.1837,  ..., -1.2136, -1.2136, -1.2285],
          ...,
          [-1.1837, -1.1837, -1.1837,  ..., -1.1837, -1.1837, -1.1837],
          [-1.1837, -1.1986, -1.1986,  ..., -1.1986, -1.1837, -1.1687],
          [-1.1837, -1.1837, -1.1837,  ..., -1.1986, -1.1986, -1.1837]],

         [[-1.1986, -1.2136, -1.2136,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1837, -1.1986, -1.1986,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1687, -1.1837, -1.1986,  ..., -1.2136, -1.2136, -1.2285],
          ...,
          [-1.1837, -1.1986, -1.1986,  ..., -1.1986, -1.1986, -1.1986],
          [-1.1837, -1.1837, -1.1837,  ..., -1.1837, -1.1837, -1.1687],
          [-1.1837, -1.1837, -1.1986,  ..., -1.1837, -1.1837, -1.1687]],

         [[-1.1986, -1.2136, -1.1986,  ..., -1.2285, -1.2285, -1.2136],
          [-1.1837, -1.1986, -1.1986,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1538, -1.1837, -1.1986,  ..., -1.2136, -1.2136, -1.2285],
          ...,
          [-1.1687, -1.1986, -1.1986,  ..., -1.1837, -1.1986, -1.1986],
          [-1.1687, -1.1837, -1.1986,  ..., -1.1837, -1.1687, -1.1837],
          [-1.1687, -1.1837, -1.1837,  ..., -1.1837, -1.1687, -1.1837]]],


        [[[-1.0593, -1.0593, -1.0867,  ..., -1.1553, -1.1553, -1.1690],
          [-1.0730, -1.0456, -1.0593,  ..., -1.1416, -1.1690, -1.1690],
          [-1.0867, -1.0593, -1.0730,  ..., -1.1416, -1.1690, -1.1553],
          ...,
          [-0.8535, -0.8947, -0.9084,  ..., -1.1553, -1.1553, -1.1690],
          [-0.9221, -0.9496, -0.9770,  ..., -1.1416, -1.1553, -1.1690],
          [-0.9633, -1.0044, -1.0319,  ..., -1.1416, -1.1553, -1.1828]],

         [[-1.0730, -1.0593, -1.0867,  ..., -1.1690, -1.1690, -1.1690],
          [-1.0867, -1.0730, -1.1005,  ..., -1.1553, -1.1690, -1.1690],
          [-1.1142, -1.1005, -1.0867,  ..., -1.1553, -1.1690, -1.1690],
          ...,
          [-0.7026, -0.7438, -0.7575,  ..., -1.1690, -1.1690, -1.1553],
          [-0.7849, -0.8261, -0.8672,  ..., -1.1553, -1.1690, -1.1828],
          [-0.8672, -0.9084, -0.9496,  ..., -1.1553, -1.1690, -1.1690]],

         [[-1.0867, -1.0867, -1.1005,  ..., -1.1828, -1.1553, -1.1690],
          [-1.0867, -1.1005, -1.1005,  ..., -1.1690, -1.1828, -1.1690],
          [-1.0730, -1.0867, -1.1005,  ..., -1.1553, -1.1828, -1.1690],
          ...,
          [-0.4969, -0.5380, -0.5929,  ..., -1.1553, -1.1553, -1.1828],
          [-0.6066, -0.6478, -0.7026,  ..., -1.1690, -1.1416, -1.1828],
          [-0.7163, -0.7712, -0.8124,  ..., -1.1690, -1.1279, -1.1553]],

         ...,

         [[-1.1690, -1.1553, -1.1416,  ..., -1.1828, -1.1690, -1.1690],
          [-1.1690, -1.1416, -1.1416,  ..., -1.1690, -1.1828, -1.1690],
          [-1.1553, -1.1416, -1.1416,  ..., -1.1690, -1.1690, -1.1690],
          ...,
          [-1.1142, -1.1416, -1.1553,  ..., -1.1553, -1.1553, -1.1553],
          [-1.1142, -1.1416, -1.1416,  ..., -1.1690, -1.1553, -1.1416],
          [-1.1553, -1.1416, -1.1553,  ..., -1.1690, -1.1690, -1.1416]],

         [[-1.1416, -1.1553, -1.1553,  ..., -1.1690, -1.1690, -1.1828],
          [-1.1553, -1.1553, -1.1553,  ..., -1.1690, -1.1690, -1.1828],
          [-1.1690, -1.1553, -1.1553,  ..., -1.1690, -1.1690, -1.1690],
          ...,
          [-1.1553, -1.1553, -1.1690,  ..., -1.1553, -1.1416, -1.1416],
          [-1.1416, -1.1416, -1.1553,  ..., -1.1553, -1.1416, -1.1416],
          [-1.1416, -1.1279, -1.1279,  ..., -1.1690, -1.1553, -1.1553]],

         [[-1.1142, -1.1416, -1.1416,  ..., -1.1690, -1.1690, -1.1690],
          [-1.1279, -1.1416, -1.1416,  ..., -1.1828, -1.1690, -1.1690],
          [-1.1416, -1.1416, -1.1416,  ..., -1.1690, -1.1690, -1.1690],
          ...,
          [-1.1553, -1.1279, -1.1416,  ..., -1.1553, -1.1416, -1.1416],
          [-1.1690, -1.1142, -1.1279,  ..., -1.1416, -1.1279, -1.1416],
          [-1.1416, -1.1005, -1.1142,  ..., -1.1553, -1.1416, -1.1416]]],


        [[[-1.1385, -1.1228, -1.1698,  ..., -1.2481, -1.2481, -1.2481],
          [-1.1228, -1.1228, -1.1698,  ..., -1.2481, -1.2481, -1.2481],
          [-1.1071, -1.1071, -1.1541,  ..., -1.2481, -1.2481, -1.2481],
          ...,
          [-0.3393, -0.3863, -0.4490,  ..., -1.1855, -1.1855, -1.2011],
          [-0.4020, -0.4647, -0.5430,  ..., -1.1855, -1.2011, -1.2011],
          [-0.4647, -0.5430, -0.6370,  ..., -1.1855, -1.2011, -1.2011]],

         [[-1.1855, -1.0758, -1.1071,  ..., -1.2481, -1.2481, -1.2481],
          [-1.1385, -1.1228, -1.1541,  ..., -1.2481, -1.2481, -1.2481],
          [-1.0914, -1.1698, -1.1385,  ..., -1.2481, -1.2481, -1.2481],
          ...,
          [-0.2767, -0.3080, -0.3707,  ..., -1.1698, -1.2011, -1.1855],
          [-0.3237, -0.3863, -0.4490,  ..., -1.1855, -1.1855, -1.1855],
          [-0.3863, -0.4490, -0.5274,  ..., -1.2011, -1.1855, -1.1855]],

         [[-1.0914, -1.1228, -1.1071,  ..., -1.2481, -1.2481, -1.2481],
          [-1.0758, -1.1385, -1.0758,  ..., -1.2481, -1.2481, -1.2481],
          [-1.1071, -1.1541, -1.1071,  ..., -1.2481, -1.2481, -1.2481],
          ...,
          [-0.1983, -0.2453, -0.2767,  ..., -1.1855, -1.1855, -1.1855],
          [-0.2453, -0.2923, -0.3393,  ..., -1.2011, -1.1698, -1.2011],
          [-0.3080, -0.3393, -0.4177,  ..., -1.2011, -1.1855, -1.2168]],

         ...,

         [[-1.1698, -1.1855, -1.2168,  ..., -1.2481, -1.2481, -1.2481],
          [-1.1855, -1.1698, -1.2011,  ..., -1.2481, -1.2481, -1.2481],
          [-1.1541, -1.1855, -1.2011,  ..., -1.2481, -1.2481, -1.2481],
          ...,
          [-1.1855, -1.2011, -1.2168,  ..., -1.1855, -1.2011, -1.2011],
          [-1.2011, -1.2011, -1.1855,  ..., -1.2011, -1.2011, -1.2011],
          [-1.1855, -1.1855, -1.1855,  ..., -1.1855, -1.2011, -1.1855]],

         [[-1.1855, -1.2011, -1.1698,  ..., -1.2481, -1.2481, -1.2481],
          [-1.1855, -1.1698, -1.1855,  ..., -1.2481, -1.2481, -1.2481],
          [-1.1698, -1.1855, -1.1698,  ..., -1.2481, -1.2481, -1.2481],
          ...,
          [-1.1855, -1.2011, -1.1698,  ..., -1.2011, -1.2011, -1.2168],
          [-1.1855, -1.1855, -1.1855,  ..., -1.2011, -1.2011, -1.2168],
          [-1.2011, -1.1855, -1.2011,  ..., -1.2011, -1.2011, -1.2011]],

         [[-1.1698, -1.1855, -1.2011,  ..., -1.2481, -1.2481, -1.2481],
          [-1.1855, -1.2011, -1.2011,  ..., -1.2481, -1.2481, -1.2481],
          [-1.1698, -1.2011, -1.1855,  ..., -1.2481, -1.2481, -1.2481],
          ...,
          [-1.1855, -1.1855, -1.1855,  ..., -1.2168, -1.2168, -1.2168],
          [-1.1855, -1.1855, -1.2011,  ..., -1.2011, -1.2168, -1.2011],
          [-1.2011, -1.1855, -1.1698,  ..., -1.2011, -1.2011, -1.2011]]],


        [[[-1.1566, -1.1566, -1.1394,  ..., -1.2421, -1.2421, -1.2421],
          [-1.1566, -1.1737, -1.1737,  ..., -1.2421, -1.2421, -1.2421],
          [-1.1394, -1.1566, -1.1394,  ..., -1.2421, -1.2421, -1.2421],
          ...,
          [-0.2156, -0.2498, -0.3525,  ..., -1.1908, -1.2079, -1.2079],
          [-0.3696, -0.4551, -0.5407,  ..., -1.1908, -1.2079, -1.2079],
          [-0.5578, -0.6433, -0.7118,  ..., -1.2079, -1.1908, -1.2079]],

         [[-1.1394, -1.1394, -1.1223,  ..., -1.2421, -1.2421, -1.2421],
          [-1.1223, -1.1223, -1.1394,  ..., -1.2421, -1.2421, -1.2421],
          [-1.1223, -1.1394, -1.1394,  ..., -1.2421, -1.2421, -1.2421],
          ...,
          [ 0.0068, -0.0617, -0.1643,  ..., -1.2079, -1.1908, -1.1908],
          [-0.1643, -0.2498, -0.3183,  ..., -1.1908, -1.2079, -1.2079],
          [-0.3183, -0.4038, -0.4894,  ..., -1.1908, -1.2079, -1.2079]],

         [[-1.1394, -1.1223, -1.0881,  ..., -1.2421, -1.2421, -1.2421],
          [-1.1223, -1.0710, -1.0710,  ..., -1.2421, -1.2421, -1.2421],
          [-1.1223, -1.1052, -1.1223,  ..., -1.2421, -1.2421, -1.2421],
          ...,
          [ 0.2121,  0.1265,  0.0239,  ..., -1.2079, -1.2079, -1.1908],
          [ 0.0581, -0.0274, -0.1130,  ..., -1.2250, -1.2250, -1.2079],
          [-0.0788, -0.1814, -0.2498,  ..., -1.2079, -1.2250, -1.2250]],

         ...,

         [[-1.1908, -1.1737, -1.1737,  ..., -1.2421, -1.2421, -1.2421],
          [-1.1737, -1.1908, -1.1737,  ..., -1.2250, -1.2250, -1.2250],
          [-1.1737, -1.1908, -1.1908,  ..., -1.2079, -1.2079, -1.2079],
          ...,
          [-1.1737, -1.1566, -1.1737,  ..., -1.2079, -1.2079, -1.2079],
          [-1.1566, -1.1566, -1.1908,  ..., -1.2079, -1.2079, -1.2079],
          [-1.1737, -1.1566, -1.1737,  ..., -1.1908, -1.2079, -1.2079]],

         [[-1.1908, -1.1908, -1.1566,  ..., -1.2421, -1.2421, -1.2421],
          [-1.1908, -1.1908, -1.1908,  ..., -1.2079, -1.2079, -1.2079],
          [-1.1737, -1.1908, -1.1908,  ..., -1.1908, -1.1908, -1.1737],
          ...,
          [-1.1566, -1.1566, -1.1566,  ..., -1.2079, -1.1908, -1.1908],
          [-1.1908, -1.1737, -1.1394,  ..., -1.1908, -1.1908, -1.1908],
          [-1.1737, -1.1737, -1.1394,  ..., -1.1908, -1.1908, -1.2079]],

         [[-1.1737, -1.1566, -1.1394,  ..., -1.2421, -1.2421, -1.2421],
          [-1.1908, -1.1737, -1.1566,  ..., -1.2250, -1.2250, -1.2421],
          [-1.1908, -1.1737, -1.1737,  ..., -1.2250, -1.2079, -1.2079],
          ...,
          [-1.1737, -1.1908, -1.1737,  ..., -1.2079, -1.2079, -1.1908],
          [-1.1908, -1.2079, -1.1737,  ..., -1.2079, -1.2079, -1.1908],
          [-1.2079, -1.2079, -1.1908,  ..., -1.1908, -1.2079, -1.2079]]],


        [[[ 2.1990,  2.2308,  1.9607,  ..., -1.2965, -1.2965, -1.2965],
          [ 2.0401,  1.9925,  1.6429,  ..., -1.2965, -1.2965, -1.2965],
          [ 1.8495,  1.6111,  1.4205,  ..., -1.2965, -1.2965, -1.2965],
          ...,
          [-0.9311, -0.9470, -0.9470,  ..., -1.2330, -1.2171, -1.2330],
          [-0.9946, -1.0264, -1.0264,  ..., -1.2330, -1.2330, -1.2489],
          [-1.0582, -1.0741, -1.0741,  ..., -1.2171, -1.2171, -1.2171]],

         [[ 2.3103,  2.2944,  1.9766,  ..., -1.2965, -1.2965, -1.2965],
          [ 2.0719,  1.9607,  1.6429,  ..., -1.2965, -1.2965, -1.2965],
          [ 1.8336,  1.5317,  1.2616,  ..., -1.2965, -1.2965, -1.2965],
          ...,
          [-0.7881, -0.8040, -0.8040,  ..., -1.2171, -1.2171, -1.2171],
          [-0.8993, -0.9311, -0.9470,  ..., -1.2171, -1.2171, -1.2012],
          [-0.9946, -1.0264, -1.0264,  ..., -1.2012, -1.2330, -1.2012]],

         [[ 2.0878,  2.2467,  1.9925,  ..., -1.2965, -1.2965, -1.2965],
          [ 1.9925,  1.8654,  1.6111,  ..., -1.2965, -1.2965, -1.2965],
          [ 1.8813,  1.5476,  1.2775,  ..., -1.2806, -1.2965, -1.2965],
          ...,
          [-0.5974, -0.6292, -0.6292,  ..., -1.1853, -1.2012, -1.2171],
          [-0.7563, -0.7881, -0.7881,  ..., -1.1694, -1.2012, -1.1853],
          [-0.8993, -0.9311, -0.9470,  ..., -1.1853, -1.1853, -1.2012]],

         ...,

         [[-1.2330, -1.2330, -1.2330,  ..., -1.2965, -1.2965, -1.2965],
          [-1.2171, -1.2171, -1.2330,  ..., -1.2965, -1.2965, -1.2965],
          [-1.2330, -1.2171, -1.2171,  ..., -1.2965, -1.2965, -1.2965],
          ...,
          [-1.2012, -1.2012, -1.2489,  ..., -1.2330, -1.2171, -1.2330],
          [-1.2171, -1.2012, -1.2330,  ..., -1.2171, -1.2012, -1.2171],
          [-1.2330, -1.2171, -1.2171,  ..., -1.2330, -1.2012, -1.2171]],

         [[-1.2330, -1.2330, -1.2330,  ..., -1.2965, -1.2965, -1.2965],
          [-1.2330, -1.2489, -1.2330,  ..., -1.2965, -1.2965, -1.2965],
          [-1.2330, -1.2171, -1.2171,  ..., -1.2965, -1.2965, -1.2965],
          ...,
          [-1.2330, -1.2012, -1.2171,  ..., -1.2330, -1.2489, -1.2330],
          [-1.2330, -1.2012, -1.2171,  ..., -1.2330, -1.2489, -1.2330],
          [-1.2330, -1.2012, -1.2171,  ..., -1.2489, -1.2489, -1.2171]],

         [[-1.2330, -1.2171, -1.2330,  ..., -1.2965, -1.2965, -1.2965],
          [-1.2330, -1.2171, -1.2171,  ..., -1.2965, -1.2965, -1.2965],
          [-1.2330, -1.2171, -1.2330,  ..., -1.2965, -1.2965, -1.2965],
          ...,
          [-1.2171, -1.2171, -1.2171,  ..., -1.2171, -1.2330, -1.2330],
          [-1.2171, -1.2171, -1.2330,  ..., -1.2330, -1.2330, -1.2489],
          [-1.2171, -1.2330, -1.2330,  ..., -1.2330, -1.2330, -1.2330]]],


        [[[-1.1509, -1.1356, -1.1356,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1663, -1.1356, -1.1356,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1509, -1.1356, -1.1356,  ..., -1.2584, -1.2584, -1.2584],
          ...,
          [-0.8440, -0.8900, -0.9207,  ..., -1.1970, -1.2123, -1.2123],
          [-0.9207, -0.9668, -0.9975,  ..., -1.1816, -1.2123, -1.2123],
          [-0.9821, -1.0282, -1.0589,  ..., -1.1970, -1.2123, -1.1970]],

         [[-1.1509, -1.1509, -1.1356,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1509, -1.1356, -1.1509,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1356, -1.1356, -1.1509,  ..., -1.2584, -1.2584, -1.2584],
          ...,
          [-0.7673, -0.8133, -0.8440,  ..., -1.1970, -1.2123, -1.2123],
          [-0.8593, -0.9054, -0.9514,  ..., -1.1816, -1.2123, -1.1970],
          [-0.9514, -0.9821, -1.0282,  ..., -1.1970, -1.2123, -1.1970]],

         [[-1.1356, -1.1509, -1.1202,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1663, -1.1663, -1.1202,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1356, -1.1509, -1.1202,  ..., -1.2584, -1.2584, -1.2584],
          ...,
          [-0.6752, -0.7059, -0.7519,  ..., -1.1970, -1.2123, -1.1970],
          [-0.7826, -0.8286, -0.8900,  ..., -1.1970, -1.2123, -1.2123],
          [-0.9054, -0.9514, -0.9821,  ..., -1.2123, -1.2123, -1.1970]],

         ...,

         [[-1.1970, -1.1970, -1.1970,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1970, -1.1970, -1.2123,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1970, -1.1970, -1.1970,  ..., -1.2584, -1.2584, -1.2584],
          ...,
          [-1.1970, -1.1970, -1.1663,  ..., -1.2123, -1.2123, -1.1970],
          [-1.1816, -1.1816, -1.1816,  ..., -1.2123, -1.2123, -1.2123],
          [-1.1816, -1.1816, -1.1816,  ..., -1.2123, -1.2123, -1.2123]],

         [[-1.1970, -1.2123, -1.2123,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1970, -1.2123, -1.2123,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1970, -1.2123, -1.1970,  ..., -1.2584, -1.2584, -1.2584],
          ...,
          [-1.1816, -1.1816, -1.1970,  ..., -1.2123, -1.2123, -1.1970],
          [-1.1970, -1.1970, -1.1816,  ..., -1.2123, -1.2123, -1.1970],
          [-1.1970, -1.1970, -1.1816,  ..., -1.1970, -1.2123, -1.2123]],

         [[-1.1816, -1.2123, -1.2123,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1816, -1.2123, -1.2123,  ..., -1.2584, -1.2584, -1.2584],
          [-1.1816, -1.1970, -1.2123,  ..., -1.2584, -1.2584, -1.2584],
          ...,
          [-1.1816, -1.1816, -1.1816,  ..., -1.2123, -1.2123, -1.2123],
          [-1.1816, -1.1970, -1.1816,  ..., -1.2123, -1.2123, -1.1970],
          [-1.1816, -1.1816, -1.1816,  ..., -1.1970, -1.1970, -1.1970]]]]), 'mri_affine': tensor([[[ -1.,  -0.,  -0.,  15.],
         [  0.,   1.,   0., 114.],
         [  0.,   0.,   1.,  62.],
         [  0.,   0.,   0.,   1.]],

        [[ -1.,  -0.,  -0.,  15.],
         [  0.,   1.,   0., 114.],
         [  0.,   0.,   1.,  62.],
         [  0.,   0.,   0.,   1.]],

        [[ -1.,  -0.,  -0.,  15.],
         [  0.,   1.,   0., 114.],
         [  0.,   0.,   1.,  62.],
         [  0.,   0.,   0.,   1.]],

        [[ -1.,  -0.,  -0.,  15.],
         [  0.,   1.,   0., 114.],
         [  0.,   0.,   1.,  62.],
         [  0.,   0.,   0.,   1.]],

        [[ -1.,  -0.,  -0.,  15.],
         [  0.,   1.,   0., 114.],
         [  0.,   0.,   1.,  62.],
         [  0.,   0.,   0.,   1.]],

        [[ -1.,  -0.,  -0.,  15.],
         [  0.,   1.,   0., 114.],
         [  0.,   0.,   1.,  62.],
         [  0.,   0.,   0.,   1.]]])}
