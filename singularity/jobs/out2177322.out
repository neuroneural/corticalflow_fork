inside predict_app
[2023-02-20 20:02:17,771][__main__][INFO] - Predicting surfaces with Cortical Flow
Config:
user_config: null
inputs:
  data_type: formatted
  path: /subj/
  split_name: test
  split_file: /corticalflow/subjs.csv
  hemisphere: lh
  device: cuda:0
  template: /corticalflow/resources/smooth_templates/lh_white_smooth_380k.obj
white_model:
  nb_features:
  - - - 16
      - 32
      - 32
      - 32
    - - 32
      - 32
      - 32
      - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  integration_method: RK4
  integration_steps: 30
  share_flows: true
  model_checkpoint: /corticalflow/resources/trained_models/CFPP_LEFT_WHITE.pth
pial_model:
  nb_features:
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  integration_method: RK4
  integration_steps: 30
  share_flows: true
  model_checkpoint: /corticalflow/resources/trained_models/CFPP_LEFT_PIAL.pth
outputs:
  output_dir: /data/users2/washbee/corticalflow/cfpp/output_lh/
  out_deform:
  - 0
  - 1
  - 2
  out_format: freesurfer

a
b
[2023-02-20 20:02:17,772][__main__][INFO] - loading from formatted dataset...
[2023-02-20 20:02:17,779][__main__][INFO] - 1 subjects loaded for test in 0.0075 secs
[2023-02-20 20:02:20,389][__main__][INFO] - Template mesh <trimesh.Trimesh(vertices.shape=(379970, 3), faces.shape=(759936, 3))> read from /corticalflow/resources/smooth_templates/lh_white_smooth_380k.obj
[2023-02-20 20:02:23,003][__main__][INFO] - 2.6133 secs for white model setup:
CorticalFlow(
  (deform_blocks): ModuleList(
    (0): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(1, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (3): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (3): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(33, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(32, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
    (1): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(4, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(36, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
    (2): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(7, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(39, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
  )
)
[2023-02-20 20:02:23,004][__main__][INFO] - White model Total number of parameters: 519865
[2023-02-20 20:02:23,025][__main__][INFO] - White Model weights at deformation train 2 iteration 65000 and validation metric 0.0000 loaded from /corticalflow/resources/trained_models/CFPP_LEFT_WHITE.pth in 0.0208 secs





model size: 1.983MB





[2023-02-20 20:02:23,040][__main__][INFO] - 0.0135 secs for white model setup:
CorticalFlow(
  (deform_blocks): ModuleList(
    (0): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(1, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(33, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
    (1): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(4, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(36, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
    (2): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(7, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(39, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseRK4(
          (interpolator): PointPooling()
        )
      )
    )
  )
)
[2023-02-20 20:02:23,041][__main__][INFO] - Pial model Total number of parameters: 325737
[2023-02-20 20:02:23,057][__main__][INFO] - Pial Model weights at deformation train 2 iteration 50000 and validation metric 0.0000 loaded from /corticalflow/resources/trained_models/CFPP_LEFT_PIAL.pth in 0.0154 secs





model size: 1.243MB





[2023-02-20 20:02:23,058][__main__][INFO] - predicting...
data {'subject': [200008], 'mri_vox': tensor([[[[-1.1986, -1.1837, -1.1837,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1986, -1.1986, -1.1986,  ..., -1.2136, -1.2285, -1.2136],
          [-1.1837, -1.1986, -1.1837,  ..., -1.2136, -1.2285, -1.2136],
          ...,
          [-0.5855, -0.5855, -0.6154,  ..., -1.1986, -1.1837, -1.1837],
          [-0.6304, -0.6453, -0.6453,  ..., -1.1837, -1.1986, -1.1986],
          [-0.6753, -0.6902, -0.7052,  ..., -1.1837, -1.1986, -1.1986]],

         [[-1.1837, -1.1538, -1.1538,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1986, -1.1687, -1.1837,  ..., -1.2136, -1.2285, -1.2136],
          [-1.1837, -1.1986, -1.1687,  ..., -1.2136, -1.2285, -1.2285],
          ...,
          [-0.4958, -0.4958, -0.5108,  ..., -1.1837, -1.1986, -1.1837],
          [-0.5407, -0.5407, -0.5407,  ..., -1.1986, -1.1986, -1.1837],
          [-0.6005, -0.5855, -0.5855,  ..., -1.1837, -1.1986, -1.1986]],

         [[-1.1986, -1.1837, -1.1837,  ..., -1.2136, -1.2285, -1.2136],
          [-1.1986, -1.1837, -1.1837,  ..., -1.2136, -1.2285, -1.2136],
          [-1.1986, -1.1687, -1.1687,  ..., -1.2136, -1.2136, -1.2136],
          ...,
          [-0.4061, -0.3911, -0.4061,  ..., -1.1986, -1.1687, -1.1837],
          [-0.4510, -0.4360, -0.4659,  ..., -1.1837, -1.1687, -1.1837],
          [-0.4958, -0.4809, -0.5108,  ..., -1.1986, -1.1687, -1.1837]],

         ...,

         [[-1.1837, -1.1986, -1.1986,  ..., -1.2285, -1.2285, -1.2136],
          [-1.1837, -1.1837, -1.1986,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1986, -1.1986, -1.1837,  ..., -1.2136, -1.2136, -1.2285],
          ...,
          [-1.1837, -1.1837, -1.1837,  ..., -1.1837, -1.1837, -1.1837],
          [-1.1837, -1.1986, -1.1986,  ..., -1.1986, -1.1837, -1.1687],
          [-1.1837, -1.1837, -1.1837,  ..., -1.1986, -1.1986, -1.1837]],

         [[-1.1986, -1.2136, -1.2136,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1837, -1.1986, -1.1986,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1687, -1.1837, -1.1986,  ..., -1.2136, -1.2136, -1.2285],
          ...,
          [-1.1837, -1.1986, -1.1986,  ..., -1.1986, -1.1986, -1.1986],
          [-1.1837, -1.1837, -1.1837,  ..., -1.1837, -1.1837, -1.1687],
          [-1.1837, -1.1837, -1.1986,  ..., -1.1837, -1.1837, -1.1687]],

         [[-1.1986, -1.2136, -1.1986,  ..., -1.2285, -1.2285, -1.2136],
          [-1.1837, -1.1986, -1.1986,  ..., -1.2136, -1.2136, -1.2136],
          [-1.1538, -1.1837, -1.1986,  ..., -1.2136, -1.2136, -1.2285],
          ...,
          [-1.1687, -1.1986, -1.1986,  ..., -1.1837, -1.1986, -1.1986],
          [-1.1687, -1.1837, -1.1986,  ..., -1.1837, -1.1687, -1.1837],
          [-1.1687, -1.1837, -1.1837,  ..., -1.1837, -1.1687, -1.1837]]]]), 'mri_affine': tensor([[[ -1.,  -0.,  -0.,  15.],
         [  0.,   1.,   0., 114.],
         [  0.,   0.,   1.,  62.],
         [  0.,   0.,   0.,   1.]]])}
c
Device 0: b'NVIDIA GeForce RTX 2080 Ti', Memory : (90.37% free): 11811160064(total), 10674176000 (free), 1136984064 (used)
d
Device 0: b'NVIDIA GeForce RTX 2080 Ti', Memory : (90.27% free): 11811160064(total), 10661593088 (free), 1149566976 (used)
e
Device 0: b'NVIDIA GeForce RTX 2080 Ti', Memory : (90.09% free): 11811160064(total), 10640621568 (free), 1170538496 (used)
f
Device 0: b'NVIDIA GeForce RTX 2080 Ti', Memory : (70.29% free): 11811160064(total), 8302297088 (free), 3508862976 (used)
[2023-02-20 20:02:27,601][__main__][INFO] - 4.374727 total seconds for batch.
g
Device 0: b'NVIDIA GeForce RTX 2080 Ti', Memory : (70.29% free): 11811160064(total), 8302297088 (free), 3508862976 (used)
