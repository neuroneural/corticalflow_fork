[2023-12-19 21:50:41,209][__main__][INFO] - Training Cortical Flow
Config:
user_config: null
dataset:
  path: /subj/
  split_file: /corticalflow/subjs.csv
  train_split_name: train
  val_split_name: val
  surface_name: lh_white
trainer:
  img_batch_size: 3
  points_per_image: 150000
  train_log_interval: 10
  checkpoint_interval: 10000
  evaluate_interval: 5000
  device: cuda:0
  resume: null
  debug: false
model:
  number_of_iterations:
  - 70000
  - 70000
  - 70000
  nb_features:
  - - - 16
      - 32
      - 32
      - 32
    - - 32
      - 32
      - 32
      - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  templates:
  - /corticalflow/resources/neurips_templates/lh_white_template_30k.obj
  - /corticalflow/resources/neurips_templates/lh_white_template_135k.obj
  - /corticalflow/resources/neurips_templates/lh_white_template_435k.obj
  integration_method: NeurIPS
  integration_steps: 30
  share_flows: true
objective:
  chamffer_weight:
  - 1.0
  - 1.0
  - 1.0
  edge_loss_weight:
  - 1.0
  - 1.0
  - 1.0
optimizer:
  name: Adam
  lr:
  - 0.0001
  - 0.0001
  - 0.0001
outputs:
  output_dir: /corticalflow/output2/cf/out_lh_white

[2023-12-19 21:50:41,232][__main__][INFO] - 732 subjects loaded for training
[2023-12-19 21:50:41,236][__main__][INFO] - 58 subjects loaded for validation
[2023-12-19 21:50:48,481][__main__][INFO] - Model setup:
CorticalFlow(
  (deform_blocks): ModuleList(
    (0): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(1, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (3): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (3): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(33, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(32, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
    (1): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(4, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(36, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
    (2): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(7, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(39, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
  )
)
[2023-12-19 21:50:48,502][__main__][INFO] - Tensorboard logs saved to /corticalflow/output2/cf/out_lh_white/tb_logs
[2023-12-19 21:50:48,502][__main__][INFO] - Training deformation 0
[2023-12-19 21:50:48,709][__main__][INFO] - Train deform 0: Template mesh <trimesh.Trimesh(vertices.shape=(30358, 3), faces.shape=(60712, 3))> read from /corticalflow/resources/neurips_templates/lh_white_template_30k.obj
[2023-12-19 21:50:48,760][__main__][INFO] - Train deform 0: Shift=tensor([[[-25.0999, -20.7290,  12.6218]]], device='cuda:0') and Scale=96.30928683802699 for template mesh.
[2023-12-19 21:50:48,762][__main__][INFO] - Train deform 0: number of learnable parameters: 300115/519865
[2023-12-19 21:50:48,764][__main__][INFO] - Train deform 0: Optimizer setup:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0
)
[2023-12-19 21:50:48,764][__main__][INFO] - Starting train deformation 0 from 1 iterations with best validation loss of 3.4028234663852886e+38
[2023-12-19 21:51:08,022][__main__][INFO] - Training: deform=0, Ite=10, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04217591509222984, 'edge_loss': 0.00025207430007867515, 'loss': 0.04242799058556557}), AvgIteTime=1.93 secs
[2023-12-19 21:51:21,846][__main__][INFO] - Training: deform=0, Ite=20, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.042116517573595046, 'edge_loss': 0.00025207430007867515, 'loss': 0.04236859306693077}), AvgIteTime=1.38 secs
[2023-12-19 21:51:35,780][__main__][INFO] - Training: deform=0, Ite=30, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04252341315150261, 'edge_loss': 0.00025207430007867515, 'loss': 0.042775488644838336}), AvgIteTime=1.39 secs
[2023-12-19 21:51:49,827][__main__][INFO] - Training: deform=0, Ite=40, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04344336055219174, 'edge_loss': 0.00025207430007867515, 'loss': 0.04369543604552746}), AvgIteTime=1.40 secs
[2023-12-19 21:52:04,091][__main__][INFO] - Training: deform=0, Ite=50, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04193705171346664, 'edge_loss': 0.00025207430007867515, 'loss': 0.04218912720680237}), AvgIteTime=1.43 secs
[2023-12-19 21:52:18,482][__main__][INFO] - Training: deform=0, Ite=60, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04269187487661839, 'edge_loss': 0.00025207430007867515, 'loss': 0.04294395036995411}), AvgIteTime=1.44 secs
[2023-12-19 21:52:32,652][__main__][INFO] - Training: deform=0, Ite=70, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04199728518724442, 'edge_loss': 0.00025207430007867515, 'loss': 0.04224936068058014}), AvgIteTime=1.42 secs
[2023-12-19 21:52:47,128][__main__][INFO] - Training: deform=0, Ite=80, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.042560987174510956, 'edge_loss': 0.00025207430007867515, 'loss': 0.04281306266784668}), AvgIteTime=1.45 secs
[2023-12-19 21:53:01,584][__main__][INFO] - Training: deform=0, Ite=90, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04249456860125065, 'edge_loss': 0.00025207430007867515, 'loss': 0.042746644094586374}), AvgIteTime=1.45 secs
[2023-12-19 21:53:15,606][__main__][INFO] - Training: deform=0, Ite=100, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04239102117717266, 'edge_loss': 0.00025207430007867515, 'loss': 0.04264309667050838}), AvgIteTime=1.40 secs
[2023-12-19 21:53:30,022][__main__][INFO] - Training: deform=0, Ite=110, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04292623400688171, 'edge_loss': 0.00025207430007867515, 'loss': 0.043178309500217435}), AvgIteTime=1.44 secs
[2023-12-19 21:53:44,509][__main__][INFO] - Training: deform=0, Ite=120, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04150442481040954, 'edge_loss': 0.00025207430007867515, 'loss': 0.04175650030374527}), AvgIteTime=1.45 secs
[2023-12-19 21:53:58,906][__main__][INFO] - Training: deform=0, Ite=130, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04188691712915897, 'edge_loss': 0.00025207430007867515, 'loss': 0.042138992622494695}), AvgIteTime=1.44 secs
