[2023-12-19 21:50:44,466][__main__][INFO] - Training Cortical Flow
Config:
user_config: null
dataset:
  path: /subj/
  split_file: /corticalflow/subjs.csv
  train_split_name: train
  val_split_name: val
  surface_name: rh_white
trainer:
  img_batch_size: 3
  points_per_image: 150000
  train_log_interval: 10
  checkpoint_interval: 10000
  evaluate_interval: 5000
  device: cuda:0
  resume: null
  debug: false
model:
  number_of_iterations:
  - 70000
  - 70000
  - 70000
  nb_features:
  - - - 16
      - 32
      - 32
      - 32
    - - 32
      - 32
      - 32
      - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  - - - 16
      - 32
    - - 32
      - 32
      - 16
      - 16
  templates:
  - /corticalflow/resources/neurips_templates/rh_white_template_30k.obj
  - /corticalflow/resources/neurips_templates/rh_white_template_135k.obj
  - /corticalflow/resources/neurips_templates/rh_white_template_435k.obj
  integration_method: NeurIPS
  integration_steps: 30
  share_flows: true
objective:
  chamffer_weight:
  - 1.0
  - 1.0
  - 1.0
  edge_loss_weight:
  - 1.0
  - 1.0
  - 1.0
optimizer:
  name: Adam
  lr:
  - 0.0001
  - 0.0001
  - 0.0001
outputs:
  output_dir: /corticalflow/output2/cf/out_rh_white

[2023-12-19 21:50:44,489][__main__][INFO] - 732 subjects loaded for training
[2023-12-19 21:50:44,492][__main__][INFO] - 58 subjects loaded for validation
[2023-12-19 21:50:51,859][__main__][INFO] - Model setup:
CorticalFlow(
  (deform_blocks): ModuleList(
    (0): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(1, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (3): ConvBlock(
            (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (2): Sequential(
            (0): ConvBlock(
              (main): Conv3d(64, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (3): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(33, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(32, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (2): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
    (1): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(4, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(36, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
    (2): DeformationBlock(
      (encoder): Unet(
        (downarm): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(7, 16, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 32, kernel_size=(3, 3, 3), stride=(2, 2, 2), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
        (uparm): ModuleList(
          (0): Sequential(
            (0): ConvBlock(
              (main): Conv3d(32, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
          (1): Sequential(
            (0): ConvBlock(
              (main): Conv3d(48, 32, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
              (activation): LeakyReLU(negative_slope=0.2)
            )
            (1): Upsample(scale_factor=2.0, mode=nearest)
          )
        )
        (extras): ModuleList(
          (0): ConvBlock(
            (main): Conv3d(39, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
          (1): ConvBlock(
            (main): Conv3d(16, 16, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
            (activation): LeakyReLU(negative_slope=0.2)
          )
        )
      )
      (flow): Conv3d(16, 3, kernel_size=(3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))
      (deformer): DiffeoMeshDeformer(
        (integrate): IntegratePointWiseNeurips(
          (interpolator): PointPooling()
        )
      )
    )
  )
)
[2023-12-19 21:50:51,868][__main__][INFO] - Tensorboard logs saved to /corticalflow/output2/cf/out_rh_white/tb_logs
[2023-12-19 21:50:51,868][__main__][INFO] - Training deformation 0
[2023-12-19 21:50:52,050][__main__][INFO] - Train deform 0: Template mesh <trimesh.Trimesh(vertices.shape=(30317, 3), faces.shape=(60630, 3))> read from /corticalflow/resources/neurips_templates/rh_white_template_30k.obj
[2023-12-19 21:50:52,113][__main__][INFO] - Train deform 0: Shift=tensor([[[ 26.0446, -18.3473,  13.4998]]], device='cuda:0') and Scale=96.18108048484956 for template mesh.
[2023-12-19 21:50:52,115][__main__][INFO] - Train deform 0: number of learnable parameters: 300115/519865
[2023-12-19 21:50:52,116][__main__][INFO] - Train deform 0: Optimizer setup:
Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.0001
    weight_decay: 0
)
[2023-12-19 21:50:52,116][__main__][INFO] - Starting train deformation 0 from 1 iterations with best validation loss of 3.4028234663852886e+38
[2023-12-19 21:51:11,821][__main__][INFO] - Training: deform=0, Ite=10, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04257963560521603, 'edge_loss': 0.00024367982405237854, 'loss': 0.04282331429421902}), AvgIteTime=1.97 secs
[2023-12-19 21:51:25,957][__main__][INFO] - Training: deform=0, Ite=20, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04165968634188175, 'edge_loss': 0.00024367982405237854, 'loss': 0.041903365030884744}), AvgIteTime=1.41 secs
[2023-12-19 21:51:40,396][__main__][INFO] - Training: deform=0, Ite=30, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04214775674045086, 'edge_loss': 0.00024367982405237854, 'loss': 0.04239143542945385}), AvgIteTime=1.44 secs
[2023-12-19 21:51:54,469][__main__][INFO] - Training: deform=0, Ite=40, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04147571213543415, 'edge_loss': 0.00024367982405237854, 'loss': 0.04171939082443714}), AvgIteTime=1.41 secs
[2023-12-19 21:52:08,793][__main__][INFO] - Training: deform=0, Ite=50, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04118521921336651, 'edge_loss': 0.00024367982405237854, 'loss': 0.0414288979023695}), AvgIteTime=1.43 secs
[2023-12-19 21:52:23,206][__main__][INFO] - Training: deform=0, Ite=60, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04235401377081871, 'edge_loss': 0.00024367982405237854, 'loss': 0.0425976924598217}), AvgIteTime=1.44 secs
[2023-12-19 21:52:37,475][__main__][INFO] - Training: deform=0, Ite=70, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04139324612915516, 'edge_loss': 0.00024367982405237854, 'loss': 0.04163692481815815}), AvgIteTime=1.43 secs
[2023-12-19 21:52:51,584][__main__][INFO] - Training: deform=0, Ite=80, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04100544266402721, 'edge_loss': 0.00024367982405237854, 'loss': 0.0412491213530302}), AvgIteTime=1.41 secs
[2023-12-19 21:53:06,292][__main__][INFO] - Training: deform=0, Ite=90, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04114789888262749, 'edge_loss': 0.00024367982405237854, 'loss': 0.04139157757163048}), AvgIteTime=1.47 secs
[2023-12-19 21:53:20,510][__main__][INFO] - Training: deform=0, Ite=100, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04199816808104515, 'edge_loss': 0.00024367982405237854, 'loss': 0.04224184677004814}), AvgIteTime=1.42 secs
[2023-12-19 21:53:34,779][__main__][INFO] - Training: deform=0, Ite=110, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04191754125058651, 'edge_loss': 0.00024367982405237854, 'loss': 0.0421612199395895}), AvgIteTime=1.43 secs
[2023-12-19 21:53:49,137][__main__][INFO] - Training: deform=0, Ite=120, Losses=defaultdict(<class 'float'>, {'chamffer_points': 0.04177734702825546, 'edge_loss': 0.00024367982405237854, 'loss': 0.04202102571725845}), AvgIteTime=1.44 secs
